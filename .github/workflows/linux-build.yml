# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build on Linux

on:
  push:
    branches: [ "devel", "master" ]
  pull_request:
    branches: [ "devel", "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  DRUMSTICKNAME: DrumstickV2
  DRUMSTICK_LOCATION: ${{github.workspace}}/DrumstickV2
  UCHARDETNAME: Uchardet008
  UCHARDET_LOCATION: ${{github.workspace}}/Uchardet008

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: dawidd6/action-download-artifact@v3
      with:
        name: ${{env.DRUMSTICKNAME}}
        github_token: ${{secrets.GH_PAT}}
        repo: pedrolcl/drumstick
        allow_forks: false
        workflow: cmake.yml

    - name: Extract downloaded files
      run: tar xvf ${{env.DRUMSTICKNAME}}.tar

    - uses: dawidd6/action-download-artifact@v3
      with:
        name: ${{env.UCHARDETNAME}}
        github_token: ${{secrets.GH_PAT}}
        repo: pedrolcl/uchardet
        allow_forks: false
        workflow: linux-build.yml

    - name: Extract downloaded files
      run: tar xvf ${{env.UCHARDETNAME}}.tar

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.*'
        modules: qt5compat

    - name: Dependencies
      run: sudo apt-get update && sudo apt-get install -yq pkg-config libasound2-dev uchardet

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build
        -DBUILD_DOCS=OFF
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_PREFIX_PATH="${{env.DRUMSTICK_LOCATION}};${{env.UCHARDET_LOCATION}}"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
